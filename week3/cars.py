#!/usr/bin/env python3
import json
import locale
import sys
import reports
import emails
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    most_popular_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # TODO: also handle max sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item
        # TODO: also handle most popular car_year
        if item["car"]["car_year"] in most_popular_year:
            most_popular_year[item["car"]["car_year"]] += item["total_sales"]
        else:
            most_popular_year[item["car"]["car_year"]] = item["total_sales"]

    summary = ["The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
               "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
               "The most popular year was {} with {} sales.".format(max(most_popular_year),
                                                                    most_popular_year[max(most_popular_year)])]

    # summary = f'The {format_car(max_revenue["car"])} generated the most revenue: ${max_revenue["revenue"]}\n' \
    #           f'The {format_car(max_sales["car"])} had the most sales: {max_sales["total_sales"]}\n' \
    #           f'The most popular year was {max(most_popular_year)} with
    #           {most_popular_year[max(most_popular_year)]} sales.'

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    path = "/tmp/cars.pdf"
    pdf_summary = summary[0] + "<br/>" + summary[1] + "<br/>" + summary[2]
    reports.generate(path, os.path.basename(path), pdf_summary, cars_dict_to_table(data))
    # TODO: send the PDF report as an email attachment
    email_from = "automation@example.com"
    email_to = "<user>@example.com"
    email_subject = "Sales summary for last month"
    email_summary = summary[0] + "\n" + summary[1] + "\n" + summary[2]
    msg = emails.generate(email_from, email_to, email_subject, email_summary, path)
    emails.send(msg)


if __name__ == "__main__":
    main(sys.argv)
